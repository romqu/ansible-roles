#
# WARNING: Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.
#
 
name: immich
services:
  immich-server:
    container_name: {{ immich__docker_setup__server_container_name }}
    image: ghcr.io/immich-app/immich-server:v1.109.1
    user: ${IMMICH_USER_ID}:${IMMICH_GROUP_ID}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload/upload
      - ${LIBRARY_LOCATION}:/usr/src/app/upload/library
      - ${THUMBS_LOCATION}:/usr/src/app/upload/thumbs
      - ${PROFILE_LOCATION}:/usr/src/app/upload/profile
      - ${ENCODED_VIDEO_LOCATION}:/usr/src/app/upload/encoded-video
      - ${IMMICH_CONFIG_FILE}:${IMMICH_CONFIG_FILE}
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    expose:
      - {{ immich__docker_setup__server_container_exposed_port }}
    networks:
      - {{ immich__docker_setup__internal_network_name }}
      - {{ immich__docker_setup__external_network_name }}
    depends_on:
      - redis
      - database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:v1.109.1
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    user: ${IMMICH_USER_ID}:${IMMICH_GROUP_ID}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload/upload
      - ${LIBRARY_LOCATION}:/usr/src/app/upload/library
      - ${THUMBS_LOCATION}:/usr/src/app/upload/thumbs
      - ${PROFILE_LOCATION}:/usr/src/app/upload/profile
      - ${ENCODED_VIDEO_LOCATION}:/usr/src/app/upload/encoded-video
      - ${IMMICH_CONFIG_FILE}:${IMMICH_CONFIG_FILE}
      - model-cache:/cache
    env_file:
      - .env
    networks:
      - {{ immich__docker_setup__internal_network_name }}
    restart: always

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:e3b17ba9479deec4b7d1eeec1548a253acc5374d68d3b27937fcfe4df8d18c7e
    healthcheck:
      test: redis-cli ping || exit 1
    networks:
      - {{ immich__docker_setup__internal_network_name }}
    restart: always

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    networks:
      - {{ immich__docker_setup__internal_network_name }}
    restart: always

  backup:
    container_name: immich_db_dumper
    image: docker.io/prodrigestivill/postgres-backup-local:16@sha256:f873bbfb406db633ab879628b11ef8092279639c467a2ea5f5bfa08b776252fb
    env_file:
      - .env
    environment:
      POSTGRES_HOST: database
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: "@daily"
    volumes:
      - ${DB_BACKUP_DIR_PATH}:/backups
    networks:
      - {{ immich__docker_setup__internal_network_name }}
    depends_on:
      - database
    restart: always

volumes:
  pgdata:
  model-cache:

networks:
  {{ immich__docker_setup__internal_network_name }}:
    name: {{ immich__docker_setup__internal_network_name }}
    internal: true
  {{ immich__docker_setup__external_network_name }}:
    external: true